window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "01-dao", "modulename": "01-dao", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "01-dao.cmd", "modulename": "01-dao", "qualname": "cmd", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyteal.ScratchVar object&gt;"}, {"fullname": "01-dao.total_DAO_token_assets", "modulename": "01-dao", "qualname": "total_DAO_token_assets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyteal.Int object&gt;"}, {"fullname": "01-dao.threshold1", "modulename": "01-dao", "qualname": "threshold1", "kind": "variable", "doc": "<p></p>\n", "default_value": "500000"}, {"fullname": "01-dao.threshold2", "modulename": "01-dao", "qualname": "threshold2", "kind": "variable", "doc": "<p></p>\n", "default_value": "750000"}, {"fullname": "01-dao.threshold3", "modulename": "01-dao", "qualname": "threshold3", "kind": "variable", "doc": "<p></p>\n", "default_value": "10000"}, {"fullname": "01-dao.threshold4", "modulename": "01-dao", "qualname": "threshold4", "kind": "variable", "doc": "<p></p>\n", "default_value": "20000"}, {"fullname": "01-dao.total_Gov_token_assets", "modulename": "01-dao", "qualname": "total_Gov_token_assets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyteal.Int object&gt;"}, {"fullname": "01-dao.handle_start", "modulename": "01-dao", "qualname": "handle_start", "kind": "function", "doc": "<p>The function <code>handle_start</code> creates and configures two new assets, i.e., Asset_UniSA and Token_Gov.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>handle_start</code> is returning a logic block that creates and configures two new assets and stores their asset IDs in global state. If the conditions are not met, it\n  rejects the transaction.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "01-dao.handle_priceTok", "modulename": "01-dao", "qualname": "handle_priceTok", "kind": "function", "doc": "<p>This function handles updating a price (sell or buy) and executing an asset transfer transaction based on\ncertain conditions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter is a string which can be equal to \"b\" if it is a buy price update; equal to \"s\" if it is a sell price update. </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>handle_priceTok</code> function is returning a sequence of operations that handle the price update logic for a token. The function checks certain conditions related to the token price and proposer, updates global state variables accordingly, performs an asset transfer, and then approves the transaction.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prefix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "01-dao.handle_price", "modulename": "01-dao", "qualname": "handle_price", "kind": "function", "doc": "<p>The function <code>handle_price</code> checks certain conditions and calls <code>handle_priceTok(prefix)</code> if the\nconditions are met, otherwise it rejects the transaction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prefix</strong>:  The <code>handle_price</code> function takes a <code>prefix</code> parameter as input. This parameter is\nused within the function to call the <code>handle_priceTok</code> function with the provided <code>prefix</code> value.\nThe <code>prefix</code> parameter is a string which can be equal to \"b\" if it is a buy price update; equal to \"s\" if it is a sell price update.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>handle_price</code> is returning a sequence (<code>Seq</code>) that contains a conditional\n  statement that checks if certain conditions are met using and, if so, it calls the function <code>handle_priceTok(prefix)</code>, otherwise it rejects the transaction.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prefix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "01-dao.approval_program", "modulename": "01-dao", "qualname": "approval_program", "kind": "function", "doc": "<p>The function <code>approval_program</code> defines the logic for handling different transaction scenarios in an\nAlgorand smart contract application. The program defines different actions such as creating assets, opting in, closing out, updating the application, deleting the application, buying assets, selling assets, and handling no-op</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Alice</strong>:  Alice is a variable representing a participant in the approval program</li>\n<li><strong>Bob</strong>:  Bob is a variable representing a participant in the approval program</li>\n<li><strong>Charlie</strong>:  Charlie is a variable representing a participant in the approval program</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>approval_program</code> function returns the compiled TEAL code for an Algorand smart contract application.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Alice</span>, </span><span class=\"param\"><span class=\"n\">Bob</span>, </span><span class=\"param\"><span class=\"n\">Charlie</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "02-create", "modulename": "02-create", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "02-create.algodAddress", "modulename": "02-create", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "02-create.algodToken", "modulename": "02-create", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "02-create.main", "modulename": "02-create", "qualname": "main", "kind": "function", "doc": "<p>The <code>main</code> function deploys an Algorand smart contract application using specified\napproval and clear programs, and then writes the application ID to a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>creatorMnemFile</strong>:  The <code>creatorMnemFile</code> parameter is a file containing the mnemonic phrase\nof the creator's Algorand account. This mnemonic phrase is used to derive the private\nkey and address of the creator's account for signing transactions</li>\n<li><strong>approvalFile</strong>:  The <code>approvalFile</code> parameter in the <code>main</code> function is a file path that\ncontains the source code for the approval program. This file is read to compile the approval program\nthat will be used in creating an Algorand smart contract application</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">creatorMnemFile</span>, </span><span class=\"param\"><span class=\"n\">approvalFile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "03-start", "modulename": "03-start", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "03-start.algodAddress", "modulename": "03-start", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "03-start.algodToken", "modulename": "03-start", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "03-start.startApp", "modulename": "03-start", "qualname": "startApp", "kind": "function", "doc": "<p>The function <code>startApp</code> initiates an application on the Algorand blockchain by sending a payment\ntransaction and an application no-op transaction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mnemFile</strong>:  It is a file containing the mnemonic phrase of the account that starts the DAO. </li>\n<li><strong>index</strong>:  The <code>index</code> parameter in the <code>startApp</code> function is an identifier for the application.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mnemFile</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "04-optinFounders", "modulename": "04-optinFounders", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "04-optinFounders.algodAddress", "modulename": "04-optinFounders", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "04-optinFounders.algodToken", "modulename": "04-optinFounders", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "04-optinFounders.optInDAO", "modulename": "04-optinFounders", "qualname": "optInDAO", "kind": "function", "doc": "<p>The <code>optInDAO</code> function is used to get DAO founders to opt-in.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  The <code>MnemFile</code> parameter in the <code>optInDAO</code> function is used to specify the file\ncontaining the mnemonic phrase of the founder.</li>\n<li><strong>appId</strong>:  The <code>appId</code> parameter in the <code>optInDAO</code> function represents the application ID that is\nbeing used for a decentralized autonomous organization (DAO).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span>, </span><span class=\"param\"><span class=\"n\">appId</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "05-optinUser", "modulename": "05-optinUser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "05-optinUser.algodAddress", "modulename": "05-optinUser", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "05-optinUser.algodToken", "modulename": "05-optinUser", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "05-optinUser.optInDAO", "modulename": "05-optinUser", "qualname": "optInDAO", "kind": "function", "doc": "<p>The function <code>optInDAO</code> function is used to get users to opt-in to the DAO.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  The <code>MnemFile</code> parameter in the <code>optInDAO</code> function is used to specify the file\ncontaining the mnemonic phrase of the user.</li>\n<li><strong>appId</strong>:  The <code>appId</code> parameter in the <code>optInDAO</code> function is used to specify the application ID\nthat the user wants to opt into.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span>, </span><span class=\"param\"><span class=\"n\">appId</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "06-price", "modulename": "06-price", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "06-price.algodAddress", "modulename": "06-price", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "06-price.algodToken", "modulename": "06-price", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "06-price.proposePrice", "modulename": "06-price", "qualname": "proposePrice", "kind": "function", "doc": "<p>The function <code>proposePrice</code> serves to propose a price (buy or sell) for a specific asset.\nThe parameters required by the function are:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  It is a file containing the mnemonic phrase of the account that asks for the price update.</li>\n<li><strong>appIndex</strong>:  The <code>index</code> parameter in the <code>startApp</code> function is an identifier for the application.</li>\n<li><strong>price</strong>:  The <code>price</code> parameter in the <code>proposePrice</code> represents the price\nvalue that you want to propose. </li>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter is a string which can be equal to \"b\" if it is a buy price update; equal to \"s\" if it is a sell price update. </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>proposePrice</code> does not explicitly return any value. If the code execution is\n  successful without any exceptions, it will print the confirmation message\n  \"wait_for_confirmation(algodClient,txId,4)\" after waiting for the transaction to be\n  confirmed. If there is an exception during the transaction sending process, it will print the error\n  message and return without any further action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span>, </span><span class=\"param\"><span class=\"n\">appIndex</span>, </span><span class=\"param\"><span class=\"n\">price</span>, </span><span class=\"param\"><span class=\"n\">prefix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "07-buy", "modulename": "07-buy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "07-buy.algodAddress", "modulename": "07-buy", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "07-buy.algodToken", "modulename": "07-buy", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "07-buy.buy", "modulename": "07-buy", "qualname": "buy", "kind": "function", "doc": "<p>The <code>buy</code> function is used by a user to purchase an asset from the DAO.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  It is a file containing the mnemonic phrase of the account that asks for the price update.</li>\n<li><strong>appIndex</strong>:  The <code>index</code> parameter in the <code>startApp</code> function is an identifier for the application.</li>\n<li><strong>nAssets</strong>:  The <code>nAssets</code> parameter in the <code>buy</code> function represents the number of assets that\na user wants to buy. </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>buy</code> function returns the transaction ID (<code>txId</code>) of the transactions sent to the\n  Algorand blockchain for buying assets.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span>, </span><span class=\"param\"><span class=\"n\">appIndex</span>, </span><span class=\"param\"><span class=\"n\">nAssets</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "08-sell", "modulename": "08-sell", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "08-sell.algodAddress", "modulename": "08-sell", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "08-sell.algodToken", "modulename": "08-sell", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "08-sell.sell", "modulename": "08-sell", "qualname": "sell", "kind": "function", "doc": "<p>The <code>sell</code> function is used by a user to sell an asset to the DAO.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  It is a file containing the mnemonic phrase of the account that asks for the price update.</li>\n<li><strong>appIndex</strong>:  The <code>index</code> parameter in the <code>startApp</code> function is an identifier for the application.</li>\n<li><strong>nAssets</strong>:  The <code>nAssets</code> parameter in the <code>buy</code> function represents the number of assets that\na user wants to buy. </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>sell</code> function returns the transaction ID (<code>txId</code>) of the transactions that were sent\n  to the Algorand blockchain for selling the specified assets.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span>, </span><span class=\"param\"><span class=\"n\">appIndex</span>, </span><span class=\"param\"><span class=\"n\">nAssets</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "09-clearAllApp", "modulename": "09-clearAllApp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "09-clearAllApp.algodAddress", "modulename": "09-clearAllApp", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "09-clearAllApp.algodToken", "modulename": "09-clearAllApp", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "09-clearAllApp.main", "modulename": "09-clearAllApp", "qualname": "main", "kind": "function", "doc": "<p>This function makes a transaction that will clear a user's state for all his applications (their local variables).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  It is a file containing the mnemonic phrase of the user</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "10-clearAllAssets", "modulename": "10-clearAllAssets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "10-clearAllAssets.algodAddress", "modulename": "10-clearAllAssets", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "10-clearAllAssets.algodToken", "modulename": "10-clearAllAssets", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "10-clearAllAssets.removeAllAssets", "modulename": "10-clearAllAssets", "qualname": "removeAllAssets", "kind": "function", "doc": "<p>The <code>removeAllAssets</code> function performs a transaction that deletes its assets and performs optout relative to them</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  It is a file containing the mnemonic phrase of the user</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "11-clearDAO", "modulename": "11-clearDAO", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "11-clearDAO.algodAddress", "modulename": "11-clearDAO", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "11-clearDAO.algodToken", "modulename": "11-clearDAO", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "11-clearDAO.clearDAO", "modulename": "11-clearDAO", "qualname": "clearDAO", "kind": "function", "doc": "<p>The <code>clearDAO</code> makes a transaction that deletes its assets and performs optout relative to them. <br />\nIt also makes a transaction that will clear the user's state for an application (their local variables).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  It is a file containing the mnemonic phrase of the account requesting deletion.</li>\n<li><strong>appId</strong>:  The <code>index</code> parameter in the <code>startApp</code> function is an identifier for the application.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span>, </span><span class=\"param\"><span class=\"n\">appId</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "12-releaseVotingTok", "modulename": "12-releaseVotingTok", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "12-releaseVotingTok.algodAddress", "modulename": "12-releaseVotingTok", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "12-releaseVotingTok.algodToken", "modulename": "12-releaseVotingTok", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "12-releaseVotingTok.transfer", "modulename": "12-releaseVotingTok", "qualname": "transfer", "kind": "function", "doc": "<p>The function <code>transfer</code> sends governors' tokens back to the DAO</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>senderMNEMFile</strong>:  It is a file containing the mnemonic phrase of the account.</li>\n<li><strong>appId</strong>:  The <code>index</code> parameter in the <code>startApp</code> function is an identifier for the application.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">senderMNEMFile</span>, </span><span class=\"param\"><span class=\"n\">appId</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "13-deleteApp", "modulename": "13-deleteApp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "13-deleteApp.algodAddress", "modulename": "13-deleteApp", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "13-deleteApp.algodToken", "modulename": "13-deleteApp", "qualname": "algodToken", "kind": "variable", "doc": "<p>Make a transaction that will delete an application</p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "13-deleteApp.deleteApp", "modulename": "13-deleteApp", "qualname": "deleteApp", "kind": "function", "doc": "<p>This function makes a transaction that will delete an application.\nThe user who will receive the money after the DAO is deleted, must also be the last to return the GOV token to it.\nOnly after that user can invoke the code to delete the DAO.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mnemFile</strong>:  It is a file containing the mnemonic phrase of the account requesting deletion.</li>\n<li><strong>appId</strong>:  The <code>index</code> parameter in the <code>startApp</code> function is an identifier for the application.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mnemFile</span>, </span><span class=\"param\"><span class=\"n\">appId</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "14-optoutUserFromDAO", "modulename": "14-optoutUserFromDAO", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "14-optoutUserFromDAO.algodAddress", "modulename": "14-optoutUserFromDAO", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "14-optoutUserFromDAO.algodToken", "modulename": "14-optoutUserFromDAO", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "14-optoutUserFromDAO.optOutDAO", "modulename": "14-optoutUserFromDAO", "qualname": "optOutDAO", "kind": "function", "doc": "<p>The function <code>optOutDAO</code> function is used to get users to opt-out from the DAO.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  The <code>MnemFile</code> parameter in the <code>optOutDAO</code> function is used to specify the file\ncontaining the mnemonic phrase of the user.</li>\n<li><strong>appId</strong>:  The <code>appId</code> parameter in the <code>optOutDAO</code> function is used to specify the application ID\nfrom which the user wants to opt out.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mnemFile</span>, </span><span class=\"param\"><span class=\"n\">app_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "15-daoUpdated", "modulename": "15-daoUpdated", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "15-daoUpdated.cmd", "modulename": "15-daoUpdated", "qualname": "cmd", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyteal.ScratchVar object&gt;"}, {"fullname": "15-daoUpdated.total_DAO_token_assets", "modulename": "15-daoUpdated", "qualname": "total_DAO_token_assets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyteal.Int object&gt;"}, {"fullname": "15-daoUpdated.threshold1", "modulename": "15-daoUpdated", "qualname": "threshold1", "kind": "variable", "doc": "<p></p>\n", "default_value": "500000"}, {"fullname": "15-daoUpdated.threshold2", "modulename": "15-daoUpdated", "qualname": "threshold2", "kind": "variable", "doc": "<p></p>\n", "default_value": "750000"}, {"fullname": "15-daoUpdated.total_Gov_token_assets", "modulename": "15-daoUpdated", "qualname": "total_Gov_token_assets", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyteal.Int object&gt;"}, {"fullname": "15-daoUpdated.handle_start", "modulename": "15-daoUpdated", "qualname": "handle_start", "kind": "function", "doc": "<p>The function <code>handle_start</code> creates and configures two new assets, i.e., Asset_UniSA and Token_Gov.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>handle_start</code> is returning a logic block that creates and configures two new assets and stores their asset IDs in global state. If the conditions are not met, it\n  rejects the transaction.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "15-daoUpdated.handle_priceTok", "modulename": "15-daoUpdated", "qualname": "handle_priceTok", "kind": "function", "doc": "<p>This function handles updating a price (sell or buy) and executing an asset transfer transaction based on\ncertain conditions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter is a string which can be equal to \"b\" if it is a buy price update; equal to \"s\" if it is a sell price update. </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>handle_priceTok</code> function is returning a sequence of operations that handle the price update logic for a token. The function checks certain conditions related to the token price and proposer, updates global state variables accordingly, performs an asset transfer, and then approves the transaction.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prefix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "15-daoUpdated.handle_price", "modulename": "15-daoUpdated", "qualname": "handle_price", "kind": "function", "doc": "<p>The function <code>handle_price</code> checks certain conditions and calls <code>handle_priceTok(prefix)</code> if the\nconditions are met, otherwise it rejects the transaction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prefix</strong>:  The <code>handle_price</code> function takes a <code>prefix</code> parameter as input. This parameter is\nused within the function to call the <code>handle_priceTok</code> function with the provided <code>prefix</code> value.\nThe <code>prefix</code> parameter is a string which can be equal to \"b\" if it is a buy price update; equal to \"s\" if it is a sell price update.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>handle_price</code> is returning a sequence (<code>Seq</code>) that contains a conditional\n  statement that checks if certain conditions are met using and, if so, it calls the function <code>handle_priceTok(prefix)</code>, otherwise it rejects the transaction.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prefix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "15-daoUpdated.approval_program", "modulename": "15-daoUpdated", "qualname": "approval_program", "kind": "function", "doc": "<p>The function <code>approval_program</code> defines the logic for handling different transaction scenarios in an\nAlgorand smart contract application. The program defines different actions such as creating assets, opting in, closing out, updating the application, deleting the application, buying assets, selling assets, and handling no-op</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Alice</strong>:  Alice is a variable representing a participant in the approval program</li>\n<li><strong>Bob</strong>:  Bob is a variable representing a participant in the approval program</li>\n<li><strong>Charlie</strong>:  Charlie is a variable representing a participant in the approval program</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>approval_program</code> function returns the compiled TEAL code for an Algorand smart contract application.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Alice</span>, </span><span class=\"param\"><span class=\"n\">Bob</span>, </span><span class=\"param\"><span class=\"n\">Charlie</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "16-updateDAO", "modulename": "16-updateDAO", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "16-updateDAO.algodAddress", "modulename": "16-updateDAO", "qualname": "algodAddress", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://testnet-api.algonode.cloud&#x27;"}, {"fullname": "16-updateDAO.algodToken", "modulename": "16-updateDAO", "qualname": "algodToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "16-updateDAO.update_application", "modulename": "16-updateDAO", "qualname": "update_application", "kind": "function", "doc": "<p>The function <code>update_application</code> compiles and sends an update transaction for an Algorand smart\ncontract application.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>MnemFile</strong>:  The <code>MnemFile</code> parameter is used to specify the file containing the mnemonic phrase of the founder.</li>\n<li><p><strong>appId</strong>:  The <code>appId</code> parameter is used to specify the application ID that the founder wants to update.</p></li>\n<li><p><strong>approvalFile</strong>:  The <code>approvalFile</code> parameter in the <code>update_application</code> function is a file\npath that contains the source code for the updated approval program.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>update_application</code> is returning the transaction ID (<code>txid</code>) of the\n  transaction that was sent to update the application on the Algorand blockchain.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mnemFile</span>, </span><span class=\"param\"><span class=\"n\">app_id</span>, </span><span class=\"param\"><span class=\"n\">approvalFile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "create_account", "modulename": "create_account", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "daoutilities", "modulename": "daoutilities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "daoutilities.DAOtokenName", "modulename": "daoutilities", "qualname": "DAOtokenName", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Asset_UniSA&#x27;"}, {"fullname": "daoutilities.DAOGovName", "modulename": "daoutilities", "qualname": "DAOGovName", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Token_Gov&#x27;"}, {"fullname": "daoutilities.getAllAssets", "modulename": "daoutilities", "qualname": "getAllAssets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Addr</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getAssetIdFromName", "modulename": "daoutilities", "qualname": "getAssetIdFromName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Addr</span>, </span><span class=\"param\"><span class=\"n\">assetName</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getGlobalVar", "modulename": "daoutilities", "qualname": "getGlobalVar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">appIndex</span>, </span><span class=\"param\"><span class=\"n\">varName</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getBuyingPrice", "modulename": "daoutilities", "qualname": "getBuyingPrice", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">appIndex</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getSellingPrice", "modulename": "daoutilities", "qualname": "getSellingPrice", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">appIndex</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getAllApps", "modulename": "daoutilities", "qualname": "getAllApps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Addr</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.assetInfo", "modulename": "daoutilities", "qualname": "assetInfo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getAssetClawback", "modulename": "daoutilities", "qualname": "getAssetClawback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getAssetCreator", "modulename": "daoutilities", "qualname": "getAssetCreator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getAmountAssetFromAddrIndex", "modulename": "daoutilities", "qualname": "getAmountAssetFromAddrIndex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Addr</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "daoutilities.getAssetFromAddr", "modulename": "daoutilities", "qualname": "getAssetFromAddr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Addr</span>, </span><span class=\"param\"><span class=\"n\">algodClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utilities", "modulename": "utilities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utilities.getSKAddr", "modulename": "utilities", "qualname": "getSKAddr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MnemFile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utilities.wait_for_confirmation", "modulename": "utilities", "qualname": "wait_for_confirmation", "kind": "function", "doc": "<p>Wait until the transaction is confirmed or rejected, or until 'timeout'\nnumber of rounds have passed.\nArgs:\n    transaction_id (str): the transaction to wait for\n    timeout (int): maximum number of rounds to wait <br />\nReturns:\n    dict: pending transaction information, or throws an error if the transaction\n        is not confirmed or rejected in the next timeout rounds</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span>, </span><span class=\"param\"><span class=\"n\">transaction_id</span>, </span><span class=\"param\"><span class=\"n\">timeout</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utilities.getClient", "modulename": "utilities", "qualname": "getClient", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();